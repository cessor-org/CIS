%%%-------------------------------------------------------------------
%% @doc
%%  https://cessor.org
%%  Cessor Information Systems, CIS
%%  CIS License v0.1.0
%%  Cessor Service Transaction Protocol
%%  Version Crown-Block index = 0
%%  Version Serial Domain = 0
%%  Version Serial Number = 0
%% @end
%%%-------------------------------------------------------------------

-module(cstp_000000).

-export([compose/2]).
-export([compute/2]).

-import(cstp_ft, [ft/2]).
%%%%%%%%%%%%
%%   API  %%
%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%
%%   Compose CSTX  %%
%%%%%%%%%%%%%%%%%%%%%
%%
%% compose({Order, TX}, STATE)-> Result
%%  Order = list of tuples, [Service | Rest]
%%          Service = tuple of numbers, {SD, SSD}
%%                    SD = number, >=0 && <256, service domain
%%                    SSD = number, >=0 && <256, service sub-domain
%%          Rest = list of tuples, [ Procedure, Process, Parameters ]
%%  TX = binary, recursive composed TX
%%  STATE = map, state of caller has to be compatible with order resources
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%%                      
%%      {error,  Reason}
%%          Generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compose
%%              Fault =
%%                {error, [order]}, order format is unavailable
%% INFO:
%%      Compose a cessor cervice transaction, CSTX from an order list
%%      This module composes orders with Version {CBI=0, VSD=0, VSN=0}
%%      This module composes orders with SD = 0
%%
compose({Order=[_service={0,_} | _rest], TX}, STATE) ->
    cstp_000000_00:compose({Order, <<TX/binary, 0>>}, STATE);
compose(_Order, _STATE) ->
    ft(_Issuer={?MODULE, compose}, _Fault={error, [order]}).

%%%%%%%%%%%%%%%%%%%%%
%%   Compute CSTX  %%
%%%%%%%%%%%%%%%%%%%%%
%%
%% compute(TX, STATE)-> Result
%%  TX = binary, << Service, Rest >>
%%          Service = binary, << SD, SSD >>
%%                    SD = number, >=0 && <256, service domain
%%                    SSD = number, >=0 && <256, service sub-domain
%%          Rest = binary, << Procedure, Process, Parameters >>
%%  STATE = map, state of caller has to be compatible with the resources needed to compute TX
%%  Result =
%%      {ok,Call_back}
%%          Call_back = term
%%                      
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compute
%%              Fault =
%%                {error, [tx]}, Tx format is not available
%% INFO:
%%      Compute a cessor cervice transaction, CSTX
%%      Service Domain 0 is reserved for system services
%%      Service Domain 255 is reserved for local services
%%
compute(<<Service_domain, TX_/binary>>, STATE)
  when Service_domain == 0 ->
    cstp_000000_00:compute(TX_, STATE);
  
compute(<<Service_domain, _TX_/binary>>, _STATE)
  when Service_domain == 255 ->
    %%cstp_000000_FF:compute(TX_, STATE);
    ok;

compute(_TX, _STATE) ->
    ft(_Issuer={?MODULE, compute},_Fault={error, [tx]}).


%%%%%%%%%%%%%%%%%
%%   INTERNAL  %%
%%%%%%%%%%%%%%%%%