%%%-------------------------------------------------------------------
%% @doc
%%  Cessor Information Systems, CIS
%%  CIS License v0.1.0
%%  https://cessor.org
%%  Cessor Service Transaction Protocol
%%  Version Crown-Block index = 0
%%  Version Serial Domain = 0
%%  Version Serial Number = 0
%%  Service Domain = 0;         System service domain
%%  Service Sub-Domain = 0;     System service sub-domain
%%  Procedure Range = 3;        Gate Procedure Packages Range
%%  Procedure Package = 1;      Interface_port package
%%  Process Module = 0;         State Process Module
%% @end
%%%-------------------------------------------------------------------
-module(cstp_000000_0000_0301_00).

-export([compose/2]).
-export([compute/2]).

-import(cstp_ft, [ft/2]).
%%%%%%%%%%%%%%%
%%   EXPORT  %%
%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%
%%   Compose CSTX  %%
%%%%%%%%%%%%%%%%%%%%%
%%
%% compose({Order, TX}, STATE)-> Result
%%  Order = list of tuples, [Process | Rest]
%%          Process = tuple of numbers, {PM, Processor_ref}
%%                    PM = number, >=0 && <256, process module
%%                    Processor_ref = number, >=0 && <256, process ID
%%          Rest = list of tuples, [ Parameters ]
%%  TX = binary, recursive composed TX
%%  STATE = map, state of caller has to be compatible with order resources
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%%                      
%%      {error,  Reason}
%%          Generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compose
%%              Fault =
%%                {error, [order]}, order format is unavailable
%% INFO:
%%      Compose a cessor cervice transaction, CSTX from an order list
%%      This module composes orders with Version {CBI=0, VSD=0, VSN=0}
%%      This module composes orders with Service {SD=0, SSD=0}
%%      This module composes orders with Procedure {PR=3, PP=0}
%%      This module composes orders with Process Module PM=0
%%      Processor reference pRef=0; is reserved for INIT Processor
%%      Processor reference pRef=1; is reserved for BOOT Processor
%%      Processor reference pRef=2; is reserved for STATUS Processor
%%      Compose caller can be every processes id, PID
%%
compose({[{_module=0, _ref=0}], TX}, STATE) ->
    processor_ref0({compose, TX}, STATE);
compose({[{_module=0, _ref=1}], TX}, STATE) ->
    processor_ref1({compose, TX}, STATE);
compose({[{_module=0, _ref=2}], TX}, STATE) ->
    processor_ref2({compose, TX}, STATE);

compose(Order, _STATE) ->
    ft(_Issuer={?MODULE, compose}, _Fault={error, [{order, Order}]}).
%%%%%%%%%%%%%%%%%%%%%
%%   Compute CSTX  %%
%%%%%%%%%%%%%%%%%%%%%
%%
%% compute(TX, STATE)-> Result
%%  TX = binary, << Process, Rest >>
%%          Process = binary, << Processor_ref >>
%%                    Processor_ref = number, >=0 && <256, process ID
%%          Rest = binary, << Parameters >>
%%  STATE = map, state of caller has to be compatible with the resources needed to compute TX
%%  Result =
%%      {ok,Call_back}
%%          Call_back = term
%%                      
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compute
%%              Fault =
%%                {error, [permission]}, Caller has no permission
%% INFO:
%%      Compute a cessor cervice transaction, CSTX
%%      Processor reference pRef=0 has to be called by interface application
%%      Processor reference pRef=k has to be called by interface_port generic server
%%
compute(TX= <<0, _/binary>>, STATE)->
    case whereis(interface) == self() of
        true ->
            compute(parse, TX, STATE);
        false ->
            ft(_Issuer={?MODULE, compute}, _Fault={error, [permission]})
    end;
compute(TX, STATE)->
    case whereis(interface_port) == self() of
        true ->
            compute(parse, TX, STATE);
        false ->
            ft(_Issuer={?MODULE, compute}, _Fault={error, [permission]})
    end.

%%%%%%%%%%%%%%%%%
%%   INTERNAL  %%
%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Parse Processor Reference Information %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% compute({parse, TX}, STATE)-> Result
%%  TX = binary, << Process, Rest >>
%%          Process = binary, << Processor_ref >>
%%                    Processor_ref = number, >=0 && <256, process ID
%%          Rest = binary, << Parameters >>
%%  STATE = map, state of caller has to be compatible with the resources needed to compute TX
%%  Result =
%%      Result of processor_ref*k/2
%%                      
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compute
%%              Fault =
%%                {error, [parse]}, Tx format is not available
%% INFO:
%%      Compute a cessor cervice transaction, CSTX
%%      Parse Processor References to compute
%%      Processor reference pRef=0; is reserved for INIT Processor
%%      Processor reference pRef=1; is reserved for BOOT Processor
%%      Processor reference pRef=2; is reserved for STATUS Processor
%%
compute(parse, <<0, TX_/binary>>, STATE)->
    processor_ref0({compute, TX_}, STATE);
compute(parse, <<1, TX_/binary>>, STATE)->
    processor_ref1({compute, TX_}, STATE);
compute(parse, <<2, TX_/binary>>, STATE)->
    processor_ref2({compute, TX_}, STATE);
compute(parse, _TX, _STATE) ->
    ft(_Issuer={?MODULE, compute}, _Fault={error, [parse]}).

%%%%%%%%%%%%%%%%%%%%%%%%%
%%   State Processors  %%
%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%
%%   INIT Processor  %%
%%%%%%%%%%%%%%%%%%%%%%%
%%
%% processor_ref0({compose, TX}, _)-> Result
%%  TX = binary, recursive composed TX
%%  
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%% INFO:
%%      Compose CSTX for processor_ref0
%%      A set of tasks to init the state of core generic server
%%
%%  A set of tasks to setup the system Database.
%%  The DB is OTP/mnesia DBMS
%%
processor_ref0({compose, TX}, _STATE)->
    {ok, <<TX/binary, 0>>};
%%
%% processor_ref0({compute, TX}, _)-> Result
%%  TX = binary, <<  >>
%%  
%%  Result =
%%      {ok,New_state}
%%          New_state = map, updated state of core generic server
%%      {error, Reason :: term()}
%% INFO:
%%      Compute CSTX
%%      Start and link new interface_port generic server
%%
processor_ref0({compute, <<>>}, Interface_state)->
    case interface_port:start_link() of
        {ok, PID} ->
            SYS_services = maps:get(service, Interface_state),
            New_services = lists:keyreplace(port, 1, SYS_services, {port ,PID, init}),
            New_state = maps:update(service, New_services, Interface_state),
            {ok, New_state};
        {error, Reason} ->
            ft(_Issuer={?MODULE, processor_ref0}, _Fault={error, [Reason]})
    end;
%%
%% processor_ref0(_,_)-> Result
%%  Result =
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref0
%%              Fault =
%%                {error, [tx]}, Tx format is not available
%% INFO:
%%      Computation is failed because of unavailable arguments
%%
processor_ref0(_,_) ->
    ft(_Issuer={?MODULE, processor_ref0}, _Fault={error, [tx]}).

%%%%%%%%%%%%%%%%%%%%%%%
%%   BOOT Processor  %%
%%%%%%%%%%%%%%%%%%%%%%%
%%
%% processor_ref1({compose, TX}, _)-> Result
%%  TX = binary, recursive composed TX
%%  
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%% INFO:
%%      Compose CSTX for processor_ref1
%%      A set of tasks to setup system services of core generic server
%%
processor_ref1({compose, TX}, _STATE)->
    {ok, <<TX/binary, 1>>};
%%
%% processor_ref1({compute, TX}, STATE)-> Result
%%  TX = binary, << >>
%%  STATE = map, Interface_port STATE
%%  
%%  Result =
%%      {ok,New_state}
%%          New_state = map, the updated STATE
%%      {error, Reason :: term()}
%% INFO:
%%      Compute CSTX
%%      Run components
%%      Start and link new interface_port generic server
%%
processor_ref1({compute, <<>>}, STATE)->
    PORT_num = 31415,%%   the reserved port number
    TLS_LISTEN_OPT = [
        {protocol, tls},
        {versions, ['tlsv1.3']}
    ],
    case ssl:listen(PORT_num, TLS_LISTEN_OPT) of
        {ok, LS}->
            STATE_port = maps:update(port, LS, STATE),
            processor_ref1(new_edge, STATE_port);
        {error, Reason}->
            ft(_Issuer={?MODULE, processor_ref1}, _Fault={error, [ssl_listen, Reason]})
    end;
processor_ref1(new_edge, STATE)->
    TX_port = [
        {0,0,0},    %version
        {0,0},      %service:system services
        {3,2},      %procedure:gate pRange, interface_edge pPack
        {0,0}       %process:state pMod, INIT pRef
    ],
    {ok, CSTX_port} = cstp:compose(TX_port, STATE),
    io:format("CSTX_edge: ~p~n", [CSTX_port]),
    Ref_gate = make_ref(),
    gen_server:cast(self(), {Ref_gate, CSTX_port}),

    TX_status = [
        {0,0,0},    %version
        {0,0},      %service:system services
        {3,1},      %procedure:gate pRange, interface_port pPack
        {0,2}       %process:state pMod, STATUS pRef
    ],
    {ok, CSTX_status} = cstp:compose(TX_status, #{}),
    io:format("CSTX_status: ~p~n", [CSTX_status]),
    Ref_status = make_ref(),
    gen_server:cast(self(), {Ref_status, CSTX_status}),

    New_ref = [Ref_gate, Ref_status],
    Proc_ref = maps:get(proc_ref, STATE) ++ New_ref,
    New_state = maps:update(proc_ref, Proc_ref, STATE),
    {ok, New_state};
%%
%% processor_ref1(_,_)-> Result
%%  Result =
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref0
%%              Fault =
%%                {error, [tx]}, Tx format is not available
%% INFO:
%%      Computation is failed because of unavailable arguments
%%
processor_ref1(_,_) ->
    ft(_Issuer={?MODULE, processor_ref1}, _Fault={error, [tx]}).

%%%%%%%%%%%%%%%%%%%%%%%%%
%%   STATUS Processor  %%
%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% processor_ref2({compose, TX}, _)-> Result
%%  TX = binary, recursive composed TX
%%  
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%% INFO:
%%      Compose CSTX for processor_ref2
%%      A recursive composed TX
%%
processor_ref2({compose, TX}, _STATE)->
    {ok, <<TX/binary, 2>>};
%%
%% processor_ref2({compute, TX}, _)-> Result
%%  TX = binary, << PIN >>
%%  
%%  Result =
%%      {ok,New_state}
%%          New_state = map, the updated STATE
%%      {error, Reason :: term()}
%% INFO:
%%      Compose CSTX for processor_ref2
%%      A set of tasks to report system serviceses state and interpret new status
%%      If need upgrade the service status and propogate it
%%
processor_ref2({compute, <<>>}, STATE)->
    Report = processor_ref2({status, report}, STATE),
    processor_ref2({interpret, Report}, STATE);


processor_ref2({status, report}, STATE)->
    Edge_list = maps:get(edges, STATE),
    Statuses =
        [
            %%{unset, []},
            {init, []},
            {boot, []},
            {ready, []}
            %%  Other statuses
        ],
    Fun =
        fun
            ({PID, init}, Report) ->    %% INIT
                {init, INIT} = lists:keyfind(init, 1, Report),
                lists:keyreplace(
                    init
                    ,1
                    ,Report
                    ,{init,INIT++[PID]}
                );
            ({PID, boot}, Report) ->    %% BOOT
                {boot, BOOT} = lists:keyfind(boot, 1, Report),
                lists:keyreplace(
                    boot
                    ,1
                    ,Report
                    ,{boot,BOOT++[PID]}
                );
            ({PID, ready}, Report) ->    %%  READY
                {ready, READY} = lists:keyfind(ready, 1, Report),
                lists:keyreplace(
                    ready
                    ,1
                    ,Report
                    ,{ready,READY++[PID]}
                )
        end,
    lists:foldl(Fun, Statuses, Edge_list);


processor_ref2({interpret, Report}, STATE)->
    %   List of Edges with status of UNSET
    {init, INIT} = lists:keyfind(init, 1, Report),
    %   List of Edges with status of BOOT
    {boot, _BOOT} = lists:keyfind(boot, 1, Report),
    %   List of Edges with status of READY
    {ready, _READY} = lists:keyfind(ready, 1, Report),
    _Edges_len = length(maps:get(edges, STATE)),

    case maps:get(status, STATE) of
        init
            when length(INIT) == 1 ->
                STATUS = <<"BOOT">>,
                Broad_list = [gate],
                processor_ref2({broadcast, STATUS, Broad_list}, STATE);
        boot ->
            %%processor_ref2({upgrade, _STATUS= <<"READY">>}, STATE);
            ok;
        _ ->
            {ok, STATE}
    end;

processor_ref2({broadcast, STATUS, Broad_list}, STATE)->
    Broadcast =
        fun
            (Name, ok) ->
                {Procedure, PID} =
                    case Name of
                        core ->     {{0,0}, whereis(core)};
                        crypto ->   {{1,0}, whereis(crypto_man)};
                        store ->    {{2,0}, whereis(storage)};
                        gate ->     {{3,0}, whereis(interface)}
                    end,
                TX = [
                    {0,0,0},        %version
                    {0,0},          %service:system services
                    Procedure,      %procedure: {pRange, pPack}
                    {1,0}           %process:call pMod, System STATUS pRef
                    , STATUS        %status:STATUS
                ],
                {ok, CSTX} = cstp:compose(TX, STATE),
                try
                    gen_server:call(PID, CSTX)
                catch
                    exit:_ ->
                        {error, [call, Name]}
                end;
            (_,ERR) ->
                ERR
        end,
    case lists:foldl(Broadcast, ok, Broad_list) of
        ok->
            STATE_status = maps:update(status, STATUS, STATE),
            {ok, STATE_status};
        ERR->
            ft(_Issuer={?MODULE, processor_ref2},
                _Fault={error, [broadcast]++ERR})
    end;
%%
%% processor_ref2(_,_)-> Result
%%  Result =
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref2
%%              Fault =
%%                {error, [tx]}, Tx format is not available
%% INFO:
%%      Computation is failed because of unavailable arguments
%%
processor_ref2(_,_) ->
    ft(_Issuer={?MODULE, processor_ref2}, _Fault={error, [tx]}).