%%%-------------------------------------------------------------------
%% @doc
%%  https://cessor.org
%%  Cessor Information Systems, CIS
%%  CIS License v0.1.0
%%  Cessor Service Transaction Protocol
%%  Version Crown-Block index = 0
%%  Version Serial Domain = 0
%%  Version Serial Number = 0
%%  Service Domain = 0;         System service domain
%%  Service Sub-Domain = 0;     System service sub-domain
%%  Procedure Range = 3;        Gate Procedure Packages Range
%% @end
%%%-------------------------------------------------------------------
-module(cstp_000000_0000_03).

-export([compose/2]).
-export([compute/2]).

-import(cstp_ft, [ft/2]).
%%%%%%%%%%%%%%%
%%   EXPORT  %%
%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%
%%   Compose CSTX  %%
%%%%%%%%%%%%%%%%%%%%%
%%
%% compose({Order, TX}, STATE)-> Result
%%  Order = list of tuples, [Procedure | Rest]
%%          Procedure = tuple of numbers, {PR, PP}
%%                    PR = number, >=0 && <256, procedure range
%%                    PP = number, >=0 && <256, procedure package
%%          Rest = list of tuples, [ Process, Parameters ]
%%  TX = binary, recursive composed TX
%%  STATE = map, state of caller has to be compatible with order resources
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%%                      
%%      {error,  Reason}
%%          Generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compose
%%              Fault =
%%                {error, [order]}, order format is unavailable
%% INFO:
%%      Compose a cessor cervice transaction, CSTX from an order list
%%      This module composes orders with Version {CBI=0, VSD=0, VSN=0}
%%      This module composes orders with Service {SD=0, SSD=0}
%%      This module composes orders with Gate Packages Range PR = 3
%%      Procedure package PP=0; is reserved for Interface Procedure Package
%%      Procedure package PP=1; is reserved for Interface Port Procedure Package
%%      Procedure package PP=2; is reserved for Interface Edge Procedure Package
%%      Procedure package PP=3; is reserved for Interface Remote Procedure Package
%%
compose({[_procedure={3,0} | Order], TX}, STATE) ->
    cstp_000000_0000_0300:compose({Order, <<TX/binary, 0>>}, STATE);
compose({[_procedure={3,1} | Order], TX}, STATE) ->
    cstp_000000_0000_0301:compose({Order, <<TX/binary, 1>>}, STATE);
compose({[_procedure={3,2} | Order], TX}, STATE) ->
    cstp_000000_0000_0302:compose({Order, <<TX/binary, 2>>}, STATE);
compose({[_procedure={3,3} | Order], TX}, STATE) ->
    cstp_000000_0000_0303:compose({Order, <<TX/binary, 3>>}, STATE);
compose(_Order, _STATE) ->
    ft(_Issuer={?MODULE, compose}, _Fault={error, [order]}).
%%%%%%%%%%%%%%%%%%%%%
%%   Compute CSTX  %%
%%%%%%%%%%%%%%%%%%%%%
%%
%% compute(TX, STATE)-> Result
%%  TX = binary, << Procedure, Rest >>
%%          Procedure = binary, << PP >>
%%                    PP = number, >=0 && <256, procedure package
%%          Rest = binary, << Process, Parameters >>
%%  STATE = map, state of caller has to be compatible with the resources needed to compute TX
%%  Result =
%%      {ok,Call_back}
%%          Call_back = term
%%                      
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compute
%%              Fault =
%%                {error, [tx]}, Tx format is not available
%% INFO:
%%      Compute a cessor cervice transaction, CSTX
%%      Procedure package PP=0; is reserved for Interface Procedure Package
%%      Procedure package PP=1; is reserved for Interface Port Procedure Package
%%      Procedure package PP=2; is reserved for Interface Edge Procedure Package
%%      Procedure package PP=3; is reserved for Interface Remote Procedure Package
%%
compute(<<Proc_Pack, TX_/binary>>, STATE)
  when Proc_Pack == 0 ->
    cstp_000000_0000_0300:compute(TX_, STATE);
compute(<<Proc_Pack, TX_/binary>>, STATE)
  when Proc_Pack == 1 ->
    cstp_000000_0000_0301:compute(TX_, STATE);
compute(<<Proc_Pack, TX_/binary>>, STATE)
  when Proc_Pack == 2 ->
    cstp_000000_0000_0302:compute(TX_, STATE);
compute(<<Proc_Pack, TX_/binary>>, STATE)
  when Proc_Pack == 3 ->
    cstp_000000_0000_0303:compute(TX_, STATE);
compute(_TX, _STATE) ->
    ft(_Issuer={?MODULE, compute},_Fault={error, [tx]}).
%%%%%%%%%%%%%%%%%
%%   INTERNAL  %%
%%%%%%%%%%%%%%%%%