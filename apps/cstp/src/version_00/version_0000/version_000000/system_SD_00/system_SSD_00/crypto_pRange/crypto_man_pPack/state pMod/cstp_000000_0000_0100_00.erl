%%%-------------------------------------------------------------------
%% @doc
%%  https://cessor.org
%%  Cessor Information Systems, CIS
%%  CIS License v0.1.0
%%  Cessor Service Transaction Protocol
%%  Version Crown-Block index = 0
%%  Version Serial Domain = 0
%%  Version Serial Number = 0
%%  Service Domain = 0;         System service domain
%%  Service Sub-Domain = 0;     System service sub-domain
%%  Procedure Range = 1;        Crypto Procedure Packages Range
%%  Procedure Package = 0;      Crypto_man Procedure Package
%%  Process Module = 0;         State Process Module
%% @end
%%%-------------------------------------------------------------------
-module(cstp_000000_0000_0100_00).

-export([compose/2]).
-export([compute/2]).

-import(cstp_ft, [ft/2]).
%%%%%%%%%%%%%%%
%%   EXPORT  %%
%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%
%%   Compose CSTX  %%
%%%%%%%%%%%%%%%%%%%%%
%%
%% compose({Order, TX}, STATE)-> Result
%%  Order = list of tuples, [Process | Rest]
%%          Process = tuple of numbers, {PM, Processor_ref}
%%                    PM = number, >=0 && <256, process module
%%                    Processor_ref = number, >=0 && <256, process ID
%%          Rest = list of tuples, [ Parameters ]
%%  TX = binary, recursive composed TX
%%  STATE = map, state of caller has to be compatible with order resources
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%%                      
%%      {error,  Reason}
%%          Generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compose
%%              Fault =
%%                {error, [order]}, order format is unavailable
%% INFO:
%%      Compose a cessor cervice transaction, CSTX from an order list
%%      This module composes orders with Version {CBI=0, VSD=0, VSN=0}
%%      This module composes orders with Service {SD=0, SSD=0}
%%      This module composes orders with Procedure {PR=1, PP=0}
%%      This module composes orders with Process Module PM=0
%%      Processor reference pRef=0; is reserved for INIT Processor
%%      Processor reference pRef=1; is reserved for - Processor
%%      Processor reference pRef=2; is reserved for STATUS Processor
%%      Compose caller can be every processes id, PID
%%
compose({[{_module=0, _ref=0}], TX}, STATE) ->
    processor_ref0({compose, TX}, STATE);
compose({[{_module=0, _ref=1}], TX}, STATE) ->
    processor_ref1({compose, TX}, STATE);
compose({[{_module=0, _ref=2},STATUS], TX}, STATE) ->
    processor_ref2({compose, STATUS, TX}, STATE);
compose(_Order, _STATE) ->
    ft(_Issuer={?MODULE, compose}, _Fault={error, [order]}).

%%%%%%%%%%%%%%%%%%%%%
%%   Compute CSTX  %%
%%%%%%%%%%%%%%%%%%%%%
%%
%% compute(TX, STATE)-> Result
%%  TX = binary, << Process, Rest >>
%%          Process = binary, << Processor_ref >>
%%                    Processor_ref = number, >=0 && <256, process ID
%%          Rest = binary, << Parameters >>
%%  STATE = map, state of caller has to be compatible with the resources needed to compute TX
%%  Result =
%%      {ok,Call_back}
%%          Call_back = term
%%                      
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compute
%%              Fault =
%%                {error, [permission]}, Caller has no permission
%% INFO:
%%      Compute a cessor cervice transaction, CSTX
%%      Processor reference pRef=0 can be called by cessor_unit application
%%      Processor reference pRef=k can be called by crypto_man generic server
%%      To compute Processor_ref = 0, the caller has to be crypto_man generic server
%%
compute(TX= <<0, _/binary>>, STATE)->
    case whereis(core) == self() of
        true ->
            compute(parse, TX, STATE);
        false ->
            ft(_Issuer={?MODULE, compute}, _Fault={error, [permission]})
    end;
compute(TX, STATE)->
    case whereis(crypto_man) == self() of
        true ->
            compute(parse, TX, STATE);
        false ->
            ft(_Issuer={?MODULE, compute}, _Fault={error, [permission]})
    end.

%%%%%%%%%%%%%%%%%
%%   INTERNAL  %%
%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Parse Processor Reference Information %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% compute({parse, TX}, STATE)-> Result
%%  TX = binary, << Process, Rest >>
%%          Process = binary, << Processor_ref >>
%%                    Processor_ref = number, >=0 && <256, process ID
%%          Rest = binary, << Parameters >>
%%  STATE = map, state of caller has to be compatible with the resources needed to compute TX
%%  Result =
%%      Result of processor_ref*k/2
%%                      
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compute
%%              Fault =
%%                {error, [parse]}, Tx format is not available
%% INFO:
%%      Compute a cessor cervice transaction, CSTX
%%      Parse Processor References to compute
%%      Processor reference pRef=0; is reserved for INIT Processor
%%      Processor reference pRef=1; is reserved for BOOT Processor
%%      Processor reference pRef=2; is reserved for STATUS Processor
%%
compute(parse, <<0, TX_/binary>>, STATE)->
    processor_ref0({compute, TX_}, STATE);
compute(parse, <<1, TX_/binary>>, STATE)->
    processor_ref1({compute, TX_}, STATE);
compute(parse, <<2, TX_/binary>>, STATE)->
    processor_ref2({compute, TX_}, STATE);
compute(parse, _TX, _STATE) ->
    ft(_Issuer={?MODULE, compute}, _Fault={error, [parse]}).
%%%%%%%%%%%%%%%%%%%%%%%%%
%%   State Processors  %%
%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%
%%   INIT Processor  %%
%%%%%%%%%%%%%%%%%%%%%%%
%%
%% processor_ref0({compose, TX}, _)-> Result
%%  TX = binary, recursive composed TX
%%  
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%% INFO:
%%      Compose CSTX for processor_ref0
%%      A set of tasks to init the state of crypto_man generic server
%%
processor_ref0({compose, TX}, STATE)->
    PIN = maps:get(pin, STATE),
    {ok, <<TX/binary, 0, PIN/binary>>};
%%
%% processor_ref0({compute, TX}, STATE)-> Result
%%  TX = binary, <<  >>
%%  STATE = map, state of computation
%%  
%%  Result =
%%      {ok,New_satate}
%%          New_satate = map, updated state of core generic server
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref0
%%              Fault =
%%                {error, [tx]}, Tx format is not available ??
%% INFO:
%%      Compute CSTX
%%      Start and link new crypto_man generic server
%%
processor_ref0({compute, PIN_bin}, Core_state)->
    case crypto_man:start_link(#{pin=>PIN_bin}) of
        {ok, PID} ->
            SYS_services = maps:get(service, Core_state),
            New_services = lists:keyreplace(crypto, 1, SYS_services, {crypto ,PID, init}),
            New_satate = maps:update(service, New_services, Core_state),
            {ok, New_satate};
        {error, Reason} ->
            ft(_Issuer={?MODULE, processor_ref0}, _Fault={error, [Reason]})
    end;
%%
%% processor_ref0(_,_)-> Result
%%  Result =
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref0
%%              Fault =
%%                {error, [tx]}, Tx format is not available
%% INFO:
%%      Computation is failed because of unavailable arguments
%%
processor_ref0(_,_) ->
    ft(_Issuer={?MODULE, processor_ref0}, _Fault={error, [tx]}).

%%%%%%%%%%%%%%%%%%%%%%%
%%   BOOT Processor  %%
%%%%%%%%%%%%%%%%%%%%%%%
%%
%% processor_ref1({compose, TX}, _)-> Result
%%  TX = binary, recursive composed TX
%%  
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%% INFO:
%%      Compose CSTX for processor_ref0
%%      A set of tasks to init the state of crypto_man generic server
%%
processor_ref1({compose, TX}, _STATE)->
    {ok, <<TX/binary, 1>>};
%%
%% processor_ref1({compute, TX}, STATE)-> Result
%%  TX = binary, <<  >>
%%  STATE = map, state of computation
%%  
%%  Result =
%%      {ok,New_satate}
%%          New_satate = map, updated state of core generic server
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref0
%%              Fault =
%%                {error, [tx]}, Tx format is not available ??
%% INFO:
%%      Compute CSTX
%%      Start and link new crypto_man generic server
%%
processor_ref1({compute, <<>>}, STATE)->
    Type = ecdh,
    Params = secp256k1, % uncompressed
    Random = crypto:strong_rand_bytes(32),
    {PublicKey, PrivKeyOut} = crypto:generate_key(Type, Params, Random),
    K={PrivKeyOut, [0, byte_size(PublicKey), PublicKey]},
    io:format("crypto_state, BOOT, KEY: ~p~n", [K]),
    
    TX_status = [
        {0,0,0},    %version
        {0,0},      %service:system services
        {1,0},      %procedure:crypto pRange, crypto_man pPack
        {0,2}       %process:state pMod, STATUS pRef
        , <<"BOOT">>
    ],
    {ok, CSTX_status} = cstp:compose(TX_status, #{}),
    io:format("CSTX_status: ~p~n", [CSTX_status]),
    Ref_status = make_ref(),
    gen_server:cast(self(), {Ref_status, CSTX_status}),

    New_ref = [Ref_status],
    Proc_ref = maps:get(proc_ref, STATE) ++ New_ref,
    New_state = maps:update(proc_ref, Proc_ref, STATE),
    {ok, New_state};
%%
%% processor_ref1(_,_)-> Result
%%  Result =
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref0
%%              Fault =
%%                {error, [tx]}, Tx format is not available
%% INFO:
%%      Computation is failed because of unavailable arguments
%%
processor_ref1(_,_) ->
    ft(_Issuer={?MODULE, processor_ref1}, _Fault={error, [tx]}).

%%%%%%%%%%%%%%%%%%%%%%%%%
%%   STATUS Processor  %%
%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% processor_ref2({compose, TX}, _)-> Result
%%  TX = binary, recursive composed TX
%%  
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%% INFO:
%%      Compose CSTX for processor_ref2
%%      A recursive composed TX
%%
processor_ref2({compose, STATUS, TX}, _STATE)->
    {ok, <<TX/binary, 2, STATUS/binary>>};
%%
%% processor_ref2({compute, TX}, _)-> Result
%%  TX = binary, << PIN >>
%%  
%%  Result =
%%      {ok,New_state}
%%          New_state = map, the updated STATE
%%  Result =
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref2
%%              Fault =
%%                {error, [call, core]}, core generic server is unavailable
%% INFO:
%%      Compose CSTX for processor_ref2
%%      A set of tasks to interpret new status
%%      If need upgrade the service status and propogate it
%%
processor_ref2({compute, STATUS}, STATE)->
    processor_ref2({interpret, STATUS}, STATE);
processor_ref2({interpret, New_STATUS}, STATE)->
    case maps:get(status, STATE) of
        init
            when New_STATUS == <<"BOOT">> ->
                processor_ref2({upgrade, _STATUS=boot}, STATE);
        boot
            when New_STATUS == <<"READY">> ->
                processor_ref2({upgrade, _STATUS=ready}, STATE);
        _ ->
            {ok, STATE}
    end;

processor_ref2({upgrade, _sTATUS=boot}, STATE)->
    STATUS = <<"BOOT">>,
    Broad_list = [gate, core],
    processor_ref2({broadcast, STATUS, Broad_list}, STATE);
processor_ref2({broadcast, STATUS, Broad_list}, STATE)->
    Broadcast =
        fun
            (Name, ok) ->
                {Procedure, PID} =
                    case Name of
                        core ->     {{0,0}, whereis(core)};
                        gate ->     {{3,0}, whereis(interface)}
                    end,
                TX = [
                    {0,0,0},        %version
                    {0,0},          %service:system services
                    Procedure,      %procedure: {pRange, pPack}
                    {1,0}           %process:call pMod, System STATUS pRef
                    , STATUS        %status:STATUS
                ],
                {ok, CSTX} = cstp:compose(TX, STATE),
                try
                    gen_server:call(PID, CSTX)
                catch
                    exit:_ ->
                        {error, [broadcast, call, Name]}
                end;
            (_,ERR) ->
                ERR
        end,
    case lists:foldl(Broadcast, ok, Broad_list) of
        ok->
            STATE_status = maps:update(status, STATUS, STATE),
            {ok, STATE_status};
        ERR->
            ft(_Issuer={?MODULE, processor_ref2},
                _Fault={error, [broadcast]++ERR})
    end;
%%
%% processor_ref2(_,_)-> Result
%%  Result =
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref2
%%              Fault =
%%                {error, [tx]}, Tx format is not available
%% INFO:
%%      Computation is failed because of unavailable arguments
%%
processor_ref2(_,_) ->
    ft(_Issuer={?MODULE, processor_ref2}, _Fault={error, [tx]}).