%%%-------------------------------------------------------------------
%% @doc
%%  https://cessor.org
%%  Cessor Information Systems, CIS
%%  CIS License v0.1.0
%%  Cessor Service Transaction Protocol
%%  Version Crown-Block index = 0
%%  Version Serial Domain = 0
%%  Version Serial Number = 0
%%  Service Domain = 0;         System service domain
%%  Service Sub-Domain = 0;     System service sub-domain
%%  Procedure Range = 3;        Gate Procedure Packages Range
%%  Procedure Package = 0;      Interface package
%%  Process Module = 1;         Call Process Module
%% @end
%%%-------------------------------------------------------------------
-module(cstp_000000_0000_0300_01).

-export([compose/2]).
-export([compute/2]).

-import(cstp_ft, [ft/2]).
%%%%%%%%%%%%%%%
%%   EXPORT  %%
%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%
%%   Compose CSTX  %%
%%%%%%%%%%%%%%%%%%%%%
%%
%% compose({Order, TX}, STATE)-> Result
%%  Order = list of tuples, [Process | Rest]
%%          Process = tuple of numbers, {PM, Processor_ref}
%%                    PM = number, >=0 && <256, process module
%%                    Processor_ref = number, >=0 && <256, process ID
%%          Rest = list of tuples, [ Parameters ]
%%  TX = binary, recursive composed TX
%%  STATE = map, state of caller has to be compatible with order resources
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%%                      
%%      {error,  Reason}
%%          Generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compose
%%              Fault =
%%                {error, [order]}, order format is unavailable
%% INFO:
%%      Compose a cessor cervice transaction, CSTX from an order list
%%      This module composes orders with Version {CBI=0, VSD=0, VSN=0}
%%      This module composes orders with Service {SD=0, SSD=0}
%%      This module composes orders with Procedure {PR=3, PP=0}
%%      This module composes orders with Process Module PM=1
%%      Processor reference pRef=0; is reserved for System STATUS Processor
%%      Compose caller can be every processes id, PID
%%
compose({[{_module=1, _ref=0}, STATUS], TX}, STATE)->
        processor_ref0({compose, STATUS, TX}, STATE);

compose(_Order, _STATE) ->
    ft(_Issuer={?MODULE, compose}, _Fault={error, [order]}).
%%%%%%%%%%%%%%%%%%%%%
%%   Compute CSTX  %%
%%%%%%%%%%%%%%%%%%%%%
%%
%% compute(TX, STATE)-> Result
%%  TX = binary, << Process, Rest >>
%%          Process = binary, << Processor_ref >>
%%                    Processor_ref = number, >=0 && <256, process ID
%%          Rest = binary, << Parameters >>
%%  STATE = map, state of caller has to be compatible with the resources needed to compute TX
%%  Result =
%%      {ok,Call_back}
%%          Call_back = term
%%                      
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compute
%%              Fault =
%%                {error, [permission]}, Caller has no permission
%% INFO:
%%      Compute a cessor cervice transaction, CSTX
%%      Call module has to be called by Interface generic server
%%
compute(TX, STATE)->
    case whereis(interface) == self() of
        true ->
            compute(parse, TX, STATE);
        false ->
            ft(_Issuer={?MODULE, compute}, _Fault={error, [permission]})
    end.
%%%%%%%%%%%%%%%%%
%%   INTERNAL  %%
%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Parse Processor Reference Information %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% compute({parse, TX}, STATE)-> Result
%%  TX = binary, << Process, Rest >>
%%          Process = binary, << Processor_ref >>
%%                    Processor_ref = number, >=0 && <256, process ID
%%          Rest = binary, << Parameters >>
%%  STATE = map, state of caller has to be compatible with the resources needed to compute TX
%%  Result =
%%      Result of processor_ref*k/2
%%                      
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault)
%%              Issuer = compute
%%              Fault =
%%                {error, [parse]}, Tx format is not available
%% INFO:
%%      Compute a cessor cervice transaction, CSTX
%%      Parse Processor References to compute
%%      Processor reference pRef=0; is reserved for System STATUS Processor
%%
compute(parse, <<0, TX_/binary>>, STATE)->
    processor_ref0({compute, TX_}, STATE);

compute(parse, _TX, _STATE) ->
    ft(_Issuer={?MODULE, compute}, _Fault={error, [parse]}).

%%%%%%%%%%%%%%%%%%%%%%%%%%
%%   Module Processors  %%
%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%   System STATUS Processor  %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% processor_ref0({compose, TX}, _)-> Result
%%  TX = binary, recursive composed TX
%%  
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%% INFO:
%%      Compose CSTX for processor_ref0
%%      A set of tasks to integrate state with System status
%%
processor_ref0({compose, STATUS, TX}, _STATE)->
    {ok, <<TX/binary, 0, STATUS/binary>>};
%%
%% processor_ref0({compute, TX}, _)-> Result
%%  TX = binary, <<STATUS>>
%%  
%%  Result =
%%      Result of processor_ref0({update_status, Service}, STATE)
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref0
%%              Fault =
%%                {error, [permission]}, caller has no permission
%% INFO:
%%      Compute CSTX
%%      Check permission of processor caller
%%
processor_ref0({compute, STATUS}, STATE)->
    Core =  whereis(core),
    Crypto =  whereis(crypto_man),
    Port = whereis(interface_port),
    case maps:get(caller, STATE) of
        PID when PID == Core->
            processor_ref0({core, STATUS}, STATE);
        PID when PID == Crypto->
            processor_ref0({crypto, STATUS}, STATE);
        PID when PID == Port->
            processor_ref0({interface_port, STATUS}, STATE);
        _->
            ft(_Issuer={?MODULE, processor_ref0}, _Fault={error, [permission]})
    end;
processor_ref0({core, STATUS}, STATE)->
    io:format("interface_call, core, status: ~p~n", [STATUS]),
    {ok, _reply=ok, STATE};
processor_ref0({crypto, <<"BOOT">>}, STATE)->
    io:format("interface_call, crypto, status: ~p~n", [ <<"BOOT">>]),
    case maps:get(status, STATE) of
        init ->
            TX = [
                {0,0,0},    %version
                {0,0},      %service:system services
                {3,0},      %procedure:gate pRange, interface pPack
                {0,1}       %process:state pMod, BOOT pRef
            ],
            {ok, CSTX} = cstp:compose(TX, STATE),
            io:format("CSTX_boot: ~p~n", [CSTX]),
            Ref = make_ref(),
            gen_server:cast(self(), {Ref, CSTX}),

            New_ref = [Ref],
            Proc_ref = maps:get(proc_ref, STATE) ++ New_ref,
            New_state = maps:update(proc_ref, Proc_ref, STATE),
            {ok, _reply=ok, New_state};
        _->
            ft(_Issuer={?MODULE, processor_ref0}, _Fault={error, [status, boot]})
    end;
processor_ref0({interface_port, STATUS = <<"BOOT">>}, STATE)->
    io:format("interface_call, interface_port, status: ~p~n", [STATUS]),
    
    Services = maps:get(service, STATE),
    Port = whereis(interface_port),
    New_services = lists:keyreplace(port, 1, Services, {port, Port, boot}),
    STATE_services = maps:update(service, New_services, STATE),

    TX_status = [
        {0,0,0},    %version
        {0,0},      %service:system services
        {3,0},      %procedure:gate pRange, interface pPack
        {0,2}       %process:state pMod, STATUS pRef
    ],
    {ok, CSTX_status} = cstp:compose(TX_status, #{}),
    io:format("CSTX_status: ~p~n", [CSTX_status]),
    Ref_status = make_ref(),
    gen_server:cast(self(), {Ref_status, CSTX_status}),

    New_ref = [Ref_status],
    Proc_ref = maps:get(proc_ref, STATE_services) ++ New_ref,
    New_state = maps:update(proc_ref, Proc_ref, STATE_services),
    {ok, _reply=ok, New_state};
%%
%% processor_ref0(_, _)-> Result
%%  Result =
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref0
%%              Fault =
%%                {error, [tx]}, TX format is unavailable
%% INFO:
%%      Computation is failed because of unavailable arguments
%%
processor_ref0(_,_) ->
    ft(_Issuer={?MODULE, processor_ref0}, _Fault={error, [tx]}).