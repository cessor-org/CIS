%%%-------------------------------------------------------------------
%% @doc
%%  Cessor Information Systems, CIS
%%  CIS License v0.1.0
%%  https://cessor.org
%%  Cessor Service Transaction Protocol
%%  Version Crown-Block index = 0
%%  Version Serial Domain = 0
%%  Version Serial Number = 0
%%  Service Domain = 0;         System service domain
%%  Service Sub-Domain = 0;     System service sub-domain
%%  Procedure Range = 3;        Gate Procedure Packages Range
%%  Procedure Package = 1;      Interface_edge package
%%  Process Module = 0;         State Process Module
%% @end
%%%-------------------------------------------------------------------
-module(cstp_000000_0000_0302_00).

-export([compose/2]).
-export([compute/2]).

-import(cstp_ft, [ft/2]).
%%%%%%%%%%%%%%%
%%   EXPORT  %%
%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%
%%   Compose CSTX  %%
%%%%%%%%%%%%%%%%%%%%%
%%
%% compose({Order, TX}, STATE)-> Result
%%  Order = list of tuples, [Process | Rest]
%%          Process = tuple of numbers, {PM, Processor_ref}
%%                    PM = number, >=0 && <256, process module
%%                    Processor_ref = number, >=0 && <256, process ID
%%          Rest = list of tuples, [ Parameters ]
%%  TX = binary, recursive composed TX
%%  STATE = map, state of caller has to be compatible with order resources
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%%                      
%%      {error,  Reason}
%%          Generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compose
%%              Fault =
%%                {error, [order]}, order format is unavailable
%% INFO:
%%      Compose a cessor cervice transaction, CSTX from an order list
%%      This module composes orders with Version {CBI=0, VSD=0, VSN=0}
%%      This module composes orders with Service {SD=0, SSD=0}
%%      This module composes orders with Procedure {PR=3, PP=0}
%%      This module composes orders with Process Module PM=0
%%      Processor reference pRef=0; is reserved for INIT Processor
%%      Processor reference pRef=1; is reserved for BOOT Processor
%%      Processor reference pRef=2; is reserved for STATUS Processor
%%      Compose caller can be every processes id, PID
%%
compose({[{_module=0, _ref=0}], TX}, STATE) ->
    processor_ref0({compose, TX}, STATE);
compose({[{_module=0, _ref=1}], TX}, STATE) ->
    processor_ref1({compose, TX}, STATE);
compose({[{_module=0, _ref=2},STATUS], TX}, STATE) ->
    processor_ref2({compose, STATUS, TX}, STATE);

compose(Order, _STATE) ->
    ft(_Issuer={?MODULE, compose}, _Fault={error, [{order, Order}]}).
%%%%%%%%%%%%%%%%%%%%%
%%   Compute CSTX  %%
%%%%%%%%%%%%%%%%%%%%%
%%
%% compute(TX, STATE)-> Result
%%  TX = binary, << Process, Rest >>
%%          Process = binary, << Processor_ref >>
%%                    Processor_ref = number, >=0 && <256, process ID
%%          Rest = binary, << Parameters >>
%%  STATE = map, state of caller has to be compatible with the resources needed to compute TX
%%  Result =
%%      {ok,Call_back}
%%          Call_back = term
%%                      
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compute
%%              Fault =
%%                {error, [permission]}, Caller has no permission
%% INFO:
%%      Compute a cessor cervice transaction, CSTX
%%      Processor reference pRef=0 has to be called by interface_port application
%%      Processor reference pRef=k has to be called by interface_edge generic server
%%
compute(TX= <<0, _/binary>>, STATE)->
    case whereis(interface_port) == self() of
        true ->
            compute(parse, TX, STATE);
        false ->
            ft(_Issuer={?MODULE, compute}, _Fault={error, [permission]})
    end;
compute(TX, STATE)->
    case process_info(self()) of
        undefined ->
            ft(_Issuer={?MODULE, compute}, _Fault={error, [info]});
        Info ->
            {dictionary, Dic} = lists:keyfind(dictionary, 1, Info),
            case lists:keyfind('$ancestors', 1, Dic) of
                {'$ancestors',[interface_port,interface,core,cessor_unit]} ->
                    io:format("interfaceEdge, Dic: ~p~n", [Dic]),
                    compute(parse, TX, STATE);
                _ ->
                    ft(_Issuer={?MODULE, compute}, _Fault={error, [permission]})
            end
    end.

%%%%%%%%%%%%%%%%%
%%   INTERNAL  %%
%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Parse Processor Reference Information %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% compute({parse, TX}, STATE)-> Result
%%  TX = binary, << Process, Rest >>
%%          Process = binary, << Processor_ref >>
%%                    Processor_ref = number, >=0 && <256, process ID
%%          Rest = binary, << Parameters >>
%%  STATE = map, state of caller has to be compatible with the resources needed to compute TX
%%  Result =
%%      Result of processor_ref*k/2
%%                      
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compute
%%              Fault =
%%                {error, [parse]}, Tx format is not available
%% INFO:
%%      Compute a cessor cervice transaction, CSTX
%%      Parse Processor References to compute
%%      Processor reference pRef=0; is reserved for INIT Processor
%%      Processor reference pRef=1; is reserved for BOOT Processor
%%      Processor reference pRef=2; is reserved for STATUS Processor
%%
compute(parse, <<0, TX_/binary>>, STATE)->
    processor_ref0({compute, TX_}, STATE);
compute(parse, <<1, TX_/binary>>, STATE)->
    processor_ref1({compute, TX_}, STATE);
compute(parse, <<2, TX_/binary>>, STATE)->
    processor_ref2({compute, TX_}, STATE);
compute(parse, _TX, _STATE) ->
    ft(_Issuer={?MODULE, compute}, _Fault={error, [parse]}).

%%%%%%%%%%%%%%%%%%%%%%%%%
%%   State Processors  %%
%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%
%%   INIT Processor  %%
%%%%%%%%%%%%%%%%%%%%%%%
%%
%% processor_ref0({compose, TX}, _)-> Result
%%  TX = binary, recursive composed TX
%%  
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%% INFO:
%%      Compose CSTX for processor_ref0
%%      A set of tasks to init the state of core generic server
%%
%%  A set of tasks to setup the system Database.
%%  The DB is OTP/mnesia DBMS
%%
processor_ref0({compose, TX}, _STATE)->
    {ok, <<TX/binary, 0>>};
%%
%% processor_ref0({compute, TX}, _)-> Result
%%  TX = binary, <<  >>
%%  
%%  Result =
%%      {ok,New_state}
%%          New_state = map, updated state of core generic server
%%      {error, Reason :: term()}
%% INFO:
%%      Compute CSTX
%%      Start and link new interface_port generic server
%%
processor_ref0({compute, <<>>}, InterfacePort_state)->
    PORT = maps:get(port, InterfacePort_state),
    ARGS = [{port, PORT}],
    case interface_edge:start_link(ARGS) of
        {ok, PID} ->
            Edge_list = maps:get(edges, InterfacePort_state),
            New_edges = Edge_list ++ [{PID, init}],
            New_state = maps:update(edges, New_edges, InterfacePort_state),
            {ok, New_state};
        {error, Reason} ->
            ft(_Issuer={?MODULE, processor_ref0}, _Fault={error, [Reason]})
    end;
%%
%% processor_ref0(_,_)-> Result
%%  Result =
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref0
%%              Fault =
%%                {error, [tx]}, Tx format is not available
%% INFO:
%%      Computation is failed because of unavailable arguments
%%
processor_ref0(_,_) ->
    ft(_Issuer={?MODULE, processor_ref0}, _Fault={error, [tx]}).

%%%%%%%%%%%%%%%%%%%%%%%
%%   BOOT Processor  %%
%%%%%%%%%%%%%%%%%%%%%%%
%%
%% processor_ref1({compose, TX}, _)-> Result
%%  TX = binary, recursive composed TX
%%  
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%% INFO:
%%      Compose CSTX for processor_ref1
%%      A set of tasks to setup system services of core generic server
%%
processor_ref1({compose, TX}, _STATE)->
    {ok, <<TX/binary, 1>>};
%%
%% processor_ref1({compute, TX}, STATE)-> Result
%%  TX = binary, << >>
%%  STATE = map, Interface_edge STATE
%%  
%%  Result =
%%      {ok,New_state}
%%          New_state = map, the updated STATE
%%      {error, Reason :: term()}
%% INFO:
%%      Compute CSTX
%%      Run components
%%      Start and link new interface_port generic server
%%
processor_ref1({compute, <<>>}, STATE)->
    ListenSocket = maps:get(port, STATE),
    case ssl:transport_accept(ListenSocket) of
        {ok, Port_edge} ->
            Port_state = maps:update(port, Port_edge, STATE),
            TX_status = [
                {0,0,0},    %version
                {0,0},      %service:system services
                {3,2},      %procedure:gate pRange, interface_edge pPack
                {0,2}       %process:state pMod, STATUS pRef
                , <<"BOOT">>
            ],
            {ok, CSTX_status} = cstp:compose(TX_status, #{}),
            io:format("CSTX_status: ~p~n", [CSTX_status]),
            Ref_status = make_ref(),
            gen_server:cast(self(), {Ref_status, CSTX_status}),

            New_ref = [Ref_status],
            Proc_ref = maps:get(proc_ref, Port_state) ++ New_ref,
            New_state = maps:update(proc_ref, Proc_ref, Port_state),
            {ok, New_state};
        {error, Reason}->
            ft(_Issuer={?MODULE, processor_ref1}, _Fault={error, [transport_accept,Reason]})
    end;
%%
%% processor_ref1(_,_)-> Result
%%  Result =
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref0
%%              Fault =
%%                {error, [tx]}, Tx format is not available
%% INFO:
%%      Computation is failed because of unavailable arguments
%%
processor_ref1(_,_) ->
    ft(_Issuer={?MODULE, processor_ref1}, _Fault={error, [tx]}).


%%%%%%%%%%%%%%%%%%%%%%%%%
%%   STATUS Processor  %%
%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% processor_ref2({compose, TX}, _)-> Result
%%  TX = binary, recursive composed TX
%%  
%%  Result =
%%      {ok,TX_}
%%          TX_ = binary, recursive composed TX
%% INFO:
%%      Compose CSTX for processor_ref2
%%      A recursive composed TX
%%
processor_ref2({compose, STATUS, TX}, _STATE)->
    {ok, <<TX/binary, 2, STATUS/binary>>};
%%
%% processor_ref2({compute, TX}, _)-> Result
%%  TX = binary, << PIN >>
%%  
%%  Result =
%%      {ok,New_state}
%%          New_state = map, the updated STATE
%%  Result =
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref2
%%              Fault =
%%                {error, [call, core]}, core generic server is unavailable
%% INFO:
%%      Compose CSTX for processor_ref2
%%      A set of tasks to interpret new status
%%      If need upgrade the service status and propogate it
%%
processor_ref2({compute, STATUS}, STATE)->
    processor_ref2({interpret, STATUS}, STATE);
processor_ref2({interpret, New_STATUS}, STATE)->
    case maps:get(status, STATE) of
        init
            when New_STATUS == <<"BOOT">> ->
                processor_ref2({upgrade, _STATUS=boot}, STATE);
        boot
            when New_STATUS == <<"READY">> ->
                processor_ref2({upgrade, _STATUS=ready}, STATE);
        _ ->
            {ok, STATE}
    end;

processor_ref2({upgrade, _sTATUS=boot}, STATE)->
    STATUS = <<"BOOT">>,
    Broad_list = [interface_port],
    processor_ref2({broadcast, STATUS, Broad_list}, STATE);
processor_ref2({broadcast, STATUS, Broad_list}, STATE)->
    Broadcast =
        fun
            (Name, ok) ->
                {Procedure, PID} =
                    case Name of
                        interface_port ->     {{3,1}, whereis(interface_port)}
                    end,
                TX = [
                    {0,0,0},        %version
                    {0,0},          %service:system services
                    Procedure,      %procedure: {pRange, pPack}
                    {1,0}           %process:call pMod, System STATUS pRef
                    , STATUS        %status:STATUS
                ],
                {ok, CSTX} = cstp:compose(TX, STATE),
                try
                    gen_server:call(PID, CSTX)
                catch
                    exit:_ ->
                        {error, [broadcast, call, Name]}
                end;
            (_,ERR) ->
                ERR
        end,
    case lists:foldl(Broadcast, ok, Broad_list) of
        ok->
            STATE_status = maps:update(status, STATUS, STATE),
            {ok, STATE_status};
        ERR->
            ft(_Issuer={?MODULE, processor_ref2},
                _Fault={error, [broadcast]++ERR})
    end;
%%
%% processor_ref2(_,_)-> Result
%%  Result =
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = processor_ref2
%%              Fault =
%%                {error, [tx]}, Tx format is not available
%% INFO:
%%      Computation is failed because of unavailable arguments
%%
processor_ref2(_,_) ->
    ft(_Issuer={?MODULE, processor_ref2}, _Fault={error, [tx]}).