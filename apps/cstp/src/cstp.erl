%%%-------------------------------------------------------------------
%% @doc
%%  https://cessor.org
%%  Cessor Information Systems, CIS
%%  CIS License v0.1.0
%%  Cessor Service Transaction Protocol
%% @end
%%%-------------------------------------------------------------------

-module(cstp).

-export([compose/2]).
-export([compute/2]).

-import(cstp_ft, [ft/2]).
%%%%%%%%%%%%%%%
%%   EXPORT  %%
%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%
%%   Compose CSTX  %%
%%%%%%%%%%%%%%%%%%%%%
%%
%% compose(Order, STATE)-> Result
%%  Order = list of tuples, [Version | Rest]
%%          Version = tuple of numbers, {CBI, VSD, VSN}
%%                    CBI = number, >=0 && <256, the Crown-Block Index
%%                    VSD = number, >=0 && <256, version serial domain
%%                    VSN = number, >=0 && <256, version serial number
%%          Rest = [ Service, Procedure, Process, Parameters ]
%%          Service = tuple of numbers, {SD, SSD}
%%                    SD = number, >=0 && <256, service domain
%%                    SSD = number, >=0 && <256, service sub-domain
%%          Procedure = tuple of numbers, {PR, PP}
%%                    PR = number, >=0 && <256, procedure range
%%                    PP = number, >=0 && <256, procedure package
%%          Process = tuple of numbers, {PM, Processor}
%%                    PM = number, >=0 && <256, process module
%%                    Processor = number, >=0 && <256, process ID !!! reference
%%          Parameters = tuple of numbers, {Param_0, .., Param_n}
%%                    Param = term, parameters needed to compose Order
%%  STATE = map, state of caller has to be compatible with order resources
%%  Result =
%%      {ok,TX}
%%          TX = binary
%%                      
%%      {error,  Reason}
%%          Generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compose
%%              Fault =
%%                {error, [order]}, order format is unavailable
%% INFO:
%%      Compose a cessor cervice transaction, CSTX from an order list
%%      Currently, this module composes orders with CBI = 0 on first Crown tree
%%
compose(Order=[_version={0,_,_} | _rest], STATE) ->
    cstp_00:compose({Order, <<0>>}, STATE);
compose(_Order, _STATE) ->
  ft(_Issuer={?MODULE, compose}, _Fault={error, [order]}).

%%%%%%%%%%%%%%%%%%%%%
%%   Compute CSTX  %%
%%%%%%%%%%%%%%%%%%%%%
%%
%% compute(TX, STATE)-> Result
%%  TX = binary, << Version, Rest >>
%%          Version = binary, << CBI, VSD, VSN >>
%%                    CBI = number, >=0 && <256, the Crown-Block Index
%%                    VSD = number, >=0 && <256, version serial domain
%%                    VSN = number, >=0 && <256, version serial number
%%          Rest = binary, << Service, Procedure, Process, Parameters >>
%%          Service = binary, << SD, SSD >>
%%                    SD = number, >=0 && <256, service domain
%%                    SSD = number, >=0 && <256, service sub-domain
%%          Procedure = binary, << PR, PP >>
%%                    PR = number, >=0 && <256, procedure range
%%                    PP = number, >=0 && <256, procedure package
%%          Process = binary, << PM, Processor >>
%%                    PM = number, >=0 && <256, process module
%%                    Processor = number, >=0 && <256, process ID
%%          Parameters = binary, << Param_0, .., Param_n >>
%%                    Param = binary, parameters needed to compute TX
%%  STATE = map, state of caller has to be compatible with the resources needed to compute TX
%%  Result =
%%      {ok,Call_back}
%%          Call_back = term
%%                      
%%      {error,  Reason}
%%          Reason = generated by Fault Tolerance
%%            ft(Issuer, Fault) 
%%              Issuer = compute
%%              Fault =
%%                {error, [format]}, Tx format is not available
%%                {error, [state]}, State is not available
%%                {error, [version]}, TX Version is not available
%% INFO:
%%      Compute a cessor cervice transaction, CSTX
%%      Currently, this module computes transactions with CBI = 0 on first Crown tree
%%
compute(TX, STATE)
  when is_binary(TX) andalso is_map(STATE)->
    %%  Check the version Crown-Block index
    case TX of
        %   Index 0 when the protocol is issued under Crown-Block 0 on D20 block-chain
        <<0,TX_/binary>> ->
            cstp_00:compute(TX_, STATE);
        _ ->
            ft(_Issuer={?MODULE, compute},_Fault={error, [version]})
    end;

compute(TX, _STATE) 
  when not is_binary(TX)->
    ft(_Issuer={?MODULE, compute},_Fault={error, [format]});
compute(_TX, STATE) 
  when not is_map(STATE)->
    ft(_Issuer={?MODULE, compute},_Fault={error, [state]}).

%%%%%%%%%%%%%%%%%
%%   INTERNAL  %%
%%%%%%%%%%%%%%%%%

